// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-cli/pkg/fabric"
	"github.com/hyperledger/fabric-protos-go/common"
	pb "github.com/hyperledger/fabric-protos-go/peer"
	"github.com/hyperledger/fabric-sdk-go/pkg/client/ledger"
	"github.com/hyperledger/fabric-sdk-go/pkg/common/providers/fab"
)

type Ledger struct {
	QueryBlockStub        func(blockNumber uint64, options ...ledger.RequestOption) (*common.Block, error)
	queryBlockMutex       sync.RWMutex
	queryBlockArgsForCall []struct {
		blockNumber uint64
		options     []ledger.RequestOption
	}
	queryBlockReturns struct {
		result1 *common.Block
		result2 error
	}
	queryBlockReturnsOnCall map[int]struct {
		result1 *common.Block
		result2 error
	}
	QueryBlockByHashStub        func(blockHash []byte, options ...ledger.RequestOption) (*common.Block, error)
	queryBlockByHashMutex       sync.RWMutex
	queryBlockByHashArgsForCall []struct {
		blockHash []byte
		options   []ledger.RequestOption
	}
	queryBlockByHashReturns struct {
		result1 *common.Block
		result2 error
	}
	queryBlockByHashReturnsOnCall map[int]struct {
		result1 *common.Block
		result2 error
	}
	QueryBlockByTxIDStub        func(txID fab.TransactionID, options ...ledger.RequestOption) (*common.Block, error)
	queryBlockByTxIDMutex       sync.RWMutex
	queryBlockByTxIDArgsForCall []struct {
		txID    fab.TransactionID
		options []ledger.RequestOption
	}
	queryBlockByTxIDReturns struct {
		result1 *common.Block
		result2 error
	}
	queryBlockByTxIDReturnsOnCall map[int]struct {
		result1 *common.Block
		result2 error
	}
	QueryConfigStub        func(options ...ledger.RequestOption) (fab.ChannelCfg, error)
	queryConfigMutex       sync.RWMutex
	queryConfigArgsForCall []struct {
		options []ledger.RequestOption
	}
	queryConfigReturns struct {
		result1 fab.ChannelCfg
		result2 error
	}
	queryConfigReturnsOnCall map[int]struct {
		result1 fab.ChannelCfg
		result2 error
	}
	QueryInfoStub        func(options ...ledger.RequestOption) (*fab.BlockchainInfoResponse, error)
	queryInfoMutex       sync.RWMutex
	queryInfoArgsForCall []struct {
		options []ledger.RequestOption
	}
	queryInfoReturns struct {
		result1 *fab.BlockchainInfoResponse
		result2 error
	}
	queryInfoReturnsOnCall map[int]struct {
		result1 *fab.BlockchainInfoResponse
		result2 error
	}
	QueryTransactionStub        func(transactionID fab.TransactionID, options ...ledger.RequestOption) (*pb.ProcessedTransaction, error)
	queryTransactionMutex       sync.RWMutex
	queryTransactionArgsForCall []struct {
		transactionID fab.TransactionID
		options       []ledger.RequestOption
	}
	queryTransactionReturns struct {
		result1 *pb.ProcessedTransaction
		result2 error
	}
	queryTransactionReturnsOnCall map[int]struct {
		result1 *pb.ProcessedTransaction
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Ledger) QueryBlock(blockNumber uint64, options ...ledger.RequestOption) (*common.Block, error) {
	fake.queryBlockMutex.Lock()
	ret, specificReturn := fake.queryBlockReturnsOnCall[len(fake.queryBlockArgsForCall)]
	fake.queryBlockArgsForCall = append(fake.queryBlockArgsForCall, struct {
		blockNumber uint64
		options     []ledger.RequestOption
	}{blockNumber, options})
	fake.recordInvocation("QueryBlock", []interface{}{blockNumber, options})
	fake.queryBlockMutex.Unlock()
	if fake.QueryBlockStub != nil {
		return fake.QueryBlockStub(blockNumber, options...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.queryBlockReturns.result1, fake.queryBlockReturns.result2
}

func (fake *Ledger) QueryBlockCallCount() int {
	fake.queryBlockMutex.RLock()
	defer fake.queryBlockMutex.RUnlock()
	return len(fake.queryBlockArgsForCall)
}

func (fake *Ledger) QueryBlockArgsForCall(i int) (uint64, []ledger.RequestOption) {
	fake.queryBlockMutex.RLock()
	defer fake.queryBlockMutex.RUnlock()
	return fake.queryBlockArgsForCall[i].blockNumber, fake.queryBlockArgsForCall[i].options
}

func (fake *Ledger) QueryBlockReturns(result1 *common.Block, result2 error) {
	fake.QueryBlockStub = nil
	fake.queryBlockReturns = struct {
		result1 *common.Block
		result2 error
	}{result1, result2}
}

func (fake *Ledger) QueryBlockReturnsOnCall(i int, result1 *common.Block, result2 error) {
	fake.QueryBlockStub = nil
	if fake.queryBlockReturnsOnCall == nil {
		fake.queryBlockReturnsOnCall = make(map[int]struct {
			result1 *common.Block
			result2 error
		})
	}
	fake.queryBlockReturnsOnCall[i] = struct {
		result1 *common.Block
		result2 error
	}{result1, result2}
}

func (fake *Ledger) QueryBlockByHash(blockHash []byte, options ...ledger.RequestOption) (*common.Block, error) {
	var blockHashCopy []byte
	if blockHash != nil {
		blockHashCopy = make([]byte, len(blockHash))
		copy(blockHashCopy, blockHash)
	}
	fake.queryBlockByHashMutex.Lock()
	ret, specificReturn := fake.queryBlockByHashReturnsOnCall[len(fake.queryBlockByHashArgsForCall)]
	fake.queryBlockByHashArgsForCall = append(fake.queryBlockByHashArgsForCall, struct {
		blockHash []byte
		options   []ledger.RequestOption
	}{blockHashCopy, options})
	fake.recordInvocation("QueryBlockByHash", []interface{}{blockHashCopy, options})
	fake.queryBlockByHashMutex.Unlock()
	if fake.QueryBlockByHashStub != nil {
		return fake.QueryBlockByHashStub(blockHash, options...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.queryBlockByHashReturns.result1, fake.queryBlockByHashReturns.result2
}

func (fake *Ledger) QueryBlockByHashCallCount() int {
	fake.queryBlockByHashMutex.RLock()
	defer fake.queryBlockByHashMutex.RUnlock()
	return len(fake.queryBlockByHashArgsForCall)
}

func (fake *Ledger) QueryBlockByHashArgsForCall(i int) ([]byte, []ledger.RequestOption) {
	fake.queryBlockByHashMutex.RLock()
	defer fake.queryBlockByHashMutex.RUnlock()
	return fake.queryBlockByHashArgsForCall[i].blockHash, fake.queryBlockByHashArgsForCall[i].options
}

func (fake *Ledger) QueryBlockByHashReturns(result1 *common.Block, result2 error) {
	fake.QueryBlockByHashStub = nil
	fake.queryBlockByHashReturns = struct {
		result1 *common.Block
		result2 error
	}{result1, result2}
}

func (fake *Ledger) QueryBlockByHashReturnsOnCall(i int, result1 *common.Block, result2 error) {
	fake.QueryBlockByHashStub = nil
	if fake.queryBlockByHashReturnsOnCall == nil {
		fake.queryBlockByHashReturnsOnCall = make(map[int]struct {
			result1 *common.Block
			result2 error
		})
	}
	fake.queryBlockByHashReturnsOnCall[i] = struct {
		result1 *common.Block
		result2 error
	}{result1, result2}
}

func (fake *Ledger) QueryBlockByTxID(txID fab.TransactionID, options ...ledger.RequestOption) (*common.Block, error) {
	fake.queryBlockByTxIDMutex.Lock()
	ret, specificReturn := fake.queryBlockByTxIDReturnsOnCall[len(fake.queryBlockByTxIDArgsForCall)]
	fake.queryBlockByTxIDArgsForCall = append(fake.queryBlockByTxIDArgsForCall, struct {
		txID    fab.TransactionID
		options []ledger.RequestOption
	}{txID, options})
	fake.recordInvocation("QueryBlockByTxID", []interface{}{txID, options})
	fake.queryBlockByTxIDMutex.Unlock()
	if fake.QueryBlockByTxIDStub != nil {
		return fake.QueryBlockByTxIDStub(txID, options...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.queryBlockByTxIDReturns.result1, fake.queryBlockByTxIDReturns.result2
}

func (fake *Ledger) QueryBlockByTxIDCallCount() int {
	fake.queryBlockByTxIDMutex.RLock()
	defer fake.queryBlockByTxIDMutex.RUnlock()
	return len(fake.queryBlockByTxIDArgsForCall)
}

func (fake *Ledger) QueryBlockByTxIDArgsForCall(i int) (fab.TransactionID, []ledger.RequestOption) {
	fake.queryBlockByTxIDMutex.RLock()
	defer fake.queryBlockByTxIDMutex.RUnlock()
	return fake.queryBlockByTxIDArgsForCall[i].txID, fake.queryBlockByTxIDArgsForCall[i].options
}

func (fake *Ledger) QueryBlockByTxIDReturns(result1 *common.Block, result2 error) {
	fake.QueryBlockByTxIDStub = nil
	fake.queryBlockByTxIDReturns = struct {
		result1 *common.Block
		result2 error
	}{result1, result2}
}

func (fake *Ledger) QueryBlockByTxIDReturnsOnCall(i int, result1 *common.Block, result2 error) {
	fake.QueryBlockByTxIDStub = nil
	if fake.queryBlockByTxIDReturnsOnCall == nil {
		fake.queryBlockByTxIDReturnsOnCall = make(map[int]struct {
			result1 *common.Block
			result2 error
		})
	}
	fake.queryBlockByTxIDReturnsOnCall[i] = struct {
		result1 *common.Block
		result2 error
	}{result1, result2}
}

func (fake *Ledger) QueryConfig(options ...ledger.RequestOption) (fab.ChannelCfg, error) {
	fake.queryConfigMutex.Lock()
	ret, specificReturn := fake.queryConfigReturnsOnCall[len(fake.queryConfigArgsForCall)]
	fake.queryConfigArgsForCall = append(fake.queryConfigArgsForCall, struct {
		options []ledger.RequestOption
	}{options})
	fake.recordInvocation("QueryConfig", []interface{}{options})
	fake.queryConfigMutex.Unlock()
	if fake.QueryConfigStub != nil {
		return fake.QueryConfigStub(options...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.queryConfigReturns.result1, fake.queryConfigReturns.result2
}

func (fake *Ledger) QueryConfigCallCount() int {
	fake.queryConfigMutex.RLock()
	defer fake.queryConfigMutex.RUnlock()
	return len(fake.queryConfigArgsForCall)
}

func (fake *Ledger) QueryConfigArgsForCall(i int) []ledger.RequestOption {
	fake.queryConfigMutex.RLock()
	defer fake.queryConfigMutex.RUnlock()
	return fake.queryConfigArgsForCall[i].options
}

func (fake *Ledger) QueryConfigReturns(result1 fab.ChannelCfg, result2 error) {
	fake.QueryConfigStub = nil
	fake.queryConfigReturns = struct {
		result1 fab.ChannelCfg
		result2 error
	}{result1, result2}
}

func (fake *Ledger) QueryConfigReturnsOnCall(i int, result1 fab.ChannelCfg, result2 error) {
	fake.QueryConfigStub = nil
	if fake.queryConfigReturnsOnCall == nil {
		fake.queryConfigReturnsOnCall = make(map[int]struct {
			result1 fab.ChannelCfg
			result2 error
		})
	}
	fake.queryConfigReturnsOnCall[i] = struct {
		result1 fab.ChannelCfg
		result2 error
	}{result1, result2}
}

func (fake *Ledger) QueryInfo(options ...ledger.RequestOption) (*fab.BlockchainInfoResponse, error) {
	fake.queryInfoMutex.Lock()
	ret, specificReturn := fake.queryInfoReturnsOnCall[len(fake.queryInfoArgsForCall)]
	fake.queryInfoArgsForCall = append(fake.queryInfoArgsForCall, struct {
		options []ledger.RequestOption
	}{options})
	fake.recordInvocation("QueryInfo", []interface{}{options})
	fake.queryInfoMutex.Unlock()
	if fake.QueryInfoStub != nil {
		return fake.QueryInfoStub(options...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.queryInfoReturns.result1, fake.queryInfoReturns.result2
}

func (fake *Ledger) QueryInfoCallCount() int {
	fake.queryInfoMutex.RLock()
	defer fake.queryInfoMutex.RUnlock()
	return len(fake.queryInfoArgsForCall)
}

func (fake *Ledger) QueryInfoArgsForCall(i int) []ledger.RequestOption {
	fake.queryInfoMutex.RLock()
	defer fake.queryInfoMutex.RUnlock()
	return fake.queryInfoArgsForCall[i].options
}

func (fake *Ledger) QueryInfoReturns(result1 *fab.BlockchainInfoResponse, result2 error) {
	fake.QueryInfoStub = nil
	fake.queryInfoReturns = struct {
		result1 *fab.BlockchainInfoResponse
		result2 error
	}{result1, result2}
}

func (fake *Ledger) QueryInfoReturnsOnCall(i int, result1 *fab.BlockchainInfoResponse, result2 error) {
	fake.QueryInfoStub = nil
	if fake.queryInfoReturnsOnCall == nil {
		fake.queryInfoReturnsOnCall = make(map[int]struct {
			result1 *fab.BlockchainInfoResponse
			result2 error
		})
	}
	fake.queryInfoReturnsOnCall[i] = struct {
		result1 *fab.BlockchainInfoResponse
		result2 error
	}{result1, result2}
}

func (fake *Ledger) QueryTransaction(transactionID fab.TransactionID, options ...ledger.RequestOption) (*pb.ProcessedTransaction, error) {
	fake.queryTransactionMutex.Lock()
	ret, specificReturn := fake.queryTransactionReturnsOnCall[len(fake.queryTransactionArgsForCall)]
	fake.queryTransactionArgsForCall = append(fake.queryTransactionArgsForCall, struct {
		transactionID fab.TransactionID
		options       []ledger.RequestOption
	}{transactionID, options})
	fake.recordInvocation("QueryTransaction", []interface{}{transactionID, options})
	fake.queryTransactionMutex.Unlock()
	if fake.QueryTransactionStub != nil {
		return fake.QueryTransactionStub(transactionID, options...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.queryTransactionReturns.result1, fake.queryTransactionReturns.result2
}

func (fake *Ledger) QueryTransactionCallCount() int {
	fake.queryTransactionMutex.RLock()
	defer fake.queryTransactionMutex.RUnlock()
	return len(fake.queryTransactionArgsForCall)
}

func (fake *Ledger) QueryTransactionArgsForCall(i int) (fab.TransactionID, []ledger.RequestOption) {
	fake.queryTransactionMutex.RLock()
	defer fake.queryTransactionMutex.RUnlock()
	return fake.queryTransactionArgsForCall[i].transactionID, fake.queryTransactionArgsForCall[i].options
}

func (fake *Ledger) QueryTransactionReturns(result1 *pb.ProcessedTransaction, result2 error) {
	fake.QueryTransactionStub = nil
	fake.queryTransactionReturns = struct {
		result1 *pb.ProcessedTransaction
		result2 error
	}{result1, result2}
}

func (fake *Ledger) QueryTransactionReturnsOnCall(i int, result1 *pb.ProcessedTransaction, result2 error) {
	fake.QueryTransactionStub = nil
	if fake.queryTransactionReturnsOnCall == nil {
		fake.queryTransactionReturnsOnCall = make(map[int]struct {
			result1 *pb.ProcessedTransaction
			result2 error
		})
	}
	fake.queryTransactionReturnsOnCall[i] = struct {
		result1 *pb.ProcessedTransaction
		result2 error
	}{result1, result2}
}

func (fake *Ledger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.queryBlockMutex.RLock()
	defer fake.queryBlockMutex.RUnlock()
	fake.queryBlockByHashMutex.RLock()
	defer fake.queryBlockByHashMutex.RUnlock()
	fake.queryBlockByTxIDMutex.RLock()
	defer fake.queryBlockByTxIDMutex.RUnlock()
	fake.queryConfigMutex.RLock()
	defer fake.queryConfigMutex.RUnlock()
	fake.queryInfoMutex.RLock()
	defer fake.queryInfoMutex.RUnlock()
	fake.queryTransactionMutex.RLock()
	defer fake.queryTransactionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Ledger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fabric.Ledger = new(Ledger)
